name: CI/CD

on:
  push:
    branches:
      - "*"
    tags:
      - "*"
  pull_request:

env:
  project-name: 2PPy

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ['3.9', '3.10', '3.11']
        java-version: ['11', '17']
        include:
          - package: false
          - os: ubuntu
            python-version: '3.9'
            java-version: '11'
            package: true
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    outputs:
      artifact-name: ${{ steps.artifact.outputs.artifact-name }}
      version: ${{ steps.artifact.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Set up Maven with Java ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'
          architecture: 'x64'
          cache: maven
      - name: Install build tool
        run: |
          python -m pip install --upgrade pip build
      - name: Build
        env:
          JAVA_VERSION: ${{ matrix.java-version }}
        run: |
          python -m build --sdist --wheel
      - name: Install
        run: |
          pip install dist/*.whl
      - name: Install CI dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test
        run: |
          python -m pytest -p no:faulthandler
      - name: Prepare artifacts
        id: artifact
        if: ${{ matrix.package }}
        run: |
          echo 'artifact-name=${{ env.project-name }}-${{ matrix.python-version }}-${{ matrix.os }}-java${{ matrix.java-version }}' >> "$GITHUB_OUTPUT"
          VERSION=$(python -m setuptools_git_versioning)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Upload artifacts
        if: ${{ matrix.package }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.artifact-name }}
          path: |
            dist/*.whl
            dist/*.tar.gz
            LICENSE

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with Flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  release:
    runs-on: ubuntu-latest
    needs: [build, lint]
    concurrency:
      group: release
    if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name == 'push' }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}
      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.build.outputs.version }}
          fail_on_unmatched_files: true
          files: |
            dist/*.whl
            dist/*.tar.gz
            LICENSE

  publish:
    runs-on: ubuntu-latest
    needs: [build, delivery]
    concurrency:
      group: publish
    environment: test-pypi
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
